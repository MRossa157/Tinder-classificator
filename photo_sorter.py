import shutil
import os
import json
import cv2
import matplotlib.pyplot as plt
import random


def validator(image_path, debug=False):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    cascade_path = r"C:\Users\PC\AppData\Local\Programs\Python\Python39\Lib\site-packages\cv2\data\haarcascade_frontalface_default.xml"
    face_cascade = cv2.CascadeClassifier(cascade_path)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ cv2
    image_filename = image_path[image_path.rfind("\\") + 1:]
    image_path = image_path[:image_path.rfind("\\")]
    normalize_image_path = os.path.join(image_path, image_filename)
    image = cv2.imread(image_path)

    # –ï—Å–ª–∏ –æ–Ω–æ –∫—Ä–∏–≤–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å(—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞), —Ç–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Å—Ç—ã–ª—å –Ω–∏–∂–µ
    if image is None:
        shutil.copy(normalize_image_path, image_filename)
        image = cv2.imread(image_filename)
        os.remove(image_filename)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π —Ñ–æ—Ä–º–∞—Ç
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –≥–¥–µ –µ—Å—Ç—å –ª–∏—Ü–∞
    faces = face_cascade.detectMultiScale(gray,
                                          scaleFactor=1.1,
                                          minNeighbors=4)
    if debug:
        faces_detected = "–õ–∏—Ü –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: " + format(len(faces))
        print(faces_detected)
        # –ï—Å–ª–∏ –ª–∏—Ü–æ –Ω–∞—à–ª–æ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
        for (x, y, w, h) in faces:
            cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 2)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ –∂–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è ESC
        cv2.imshow("image", image)
        cv2.waitKey()
    return len(faces)


def photo_sort(flag_validator=False):
    dataset_path = r"C:\Users\PC\Desktop\–ü—Ä–æ–≥–∏\ML\Tinder_bot\Dataset\Unsorted"
    if flag_validator:
        print("–í–∞–ª–∏–¥–∞—Ç–æ—Ä –ª–∏—Ü: –í–∫–ª—é—á–µ–Ω")
    else:
        print("–í–∞–ª–∏–¥–∞—Ç–æ—Ä –ª–∏—Ü: –í—ã–∫–ª—é—á–µ–Ω")

    with open(rf"{dataset_path}\result.json", "rb") as read_file:
        data = json.load(read_file)

    print("–°–æ–∑–¥–∞–ª–∏ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    if not os.path.isdir(dataset_path + r"\Like"):
        os.mkdir(dataset_path + r"\Like")

    if not os.path.isdir(dataset_path + r"\Dislike"):
        os.mkdir(dataset_path + r"\Dislike")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –ø–∞–ø–∫–∞–º Like –∏ Dislike
    print("–û—Ç–∫—Ä—ã–ª–∏ —Ñ–∞–π–ª –∏ –Ω–∞—á–∞–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É")
    reactions = ["üíå", "‚ù§Ô∏è", "üëé"]
    for item in data["messages"]:
        if item["from"] == "–î–∞–π–≤–∏–Ω—á–∏–∫ | Leomatchbot":
            try:
                photo = item["photo"]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            except Exception as e:
                pass
        else:
            # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏—è, —Ç–æ —ç—Ç–æ –¢–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ -> –º–æ–∂–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ç–∫–µ
            if item["text"] in reactions:
                try:
                    if flag_validator:
                        if (item["text"] == reactions[0]
                            or item["text"] == reactions[1]
                            ) and validator(rf"{dataset_path}\{photo}"):
                            shutil.copy(rf"{dataset_path}\{photo}",
                                        rf"{dataset_path}\Like")

                        elif item["text"] == reactions[2] and validator(
                                rf"{dataset_path}\{photo}"):
                            shutil.copy(rf"{dataset_path}\{photo}",
                                        rf"{dataset_path}\Dislike")

                    else:
                        if item["text"] == reactions[0] or item[
                                "text"] == reactions[1]:
                            shutil.copy(rf"{dataset_path}\{photo}",
                                        rf"{dataset_path}\Like")

                        elif item["text"] == reactions[2]:
                            shutil.copy(rf"{dataset_path}\{photo}",
                                        rf"{dataset_path}\Dislike")
                except:
                    pass


def main():
    print("–ù–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É")
    for photo in os.listdir(r"C:\Users\PC\Desktop\–ü—Ä–æ–≥–∏\ML\Tinder_bot\Dataset\Dislike"):
        img = os.path.join(
            r"C:\Users\PC\Desktop\–ü—Ä–æ–≥–∏\ML\Tinder_bot\Dataset\Dislike", photo)
        print(validator(img, True))
        break


if __name__ == "__main__":
    main()
